[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "data_processing.html",
    "href": "data_processing.html",
    "title": "Data processing",
    "section": "",
    "text": "Data processing"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "EDA",
    "section": "",
    "text": "EDA"
  },
  {
    "objectID": "index.html#avalanche-hazard-forecasting-with-neural-networks",
    "href": "index.html#avalanche-hazard-forecasting-with-neural-networks",
    "title": "Home",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Model",
    "section": "",
    "text": "keras is an open-source python library that allows users to to build Neural Networks. It is known for modularity and it’s relatively gentle learning curve compared to other libraries such as pytorch. The modularity makes keras a good library for projects requiring experimentation such as this one. It should be noted that when working with keras in R, all the functions used are wrapper functions of the python functions. This makes version control extremely important. For this project, the models were created, trained and tuned using R version 4.5.1 (2025-06-13) and python version 3.11.6.\nFor this project, the goal is to train a neural network to predict the forecasted avalanche hazard(FAH). Since we are predicting the forecast, the observed avalanche hazard(OAH) needs to be removed otherwise the model would be trained on information that would not be available on new data, i.e, data leakage. Therefore the predictor sets are explicitly defined so that there is no data leakage. The FAH, OAH and Precip.Code variables are converted to integers so that the data is compatible with keras.\nA 70/30 training split was used in the data. Usually we would set aside a small portion for validation but as we will see later, keras handles this for us so we do not need to specify a validation set. Using a seed for this step is important as it ensures the split remains every time the code is ran. This is the first step toward achieving repeatable results."
  },
  {
    "objectID": "model.html#model-building",
    "href": "model.html#model-building",
    "title": "Model",
    "section": "",
    "text": "A neural network was fitted to the data in R, specifically R version 4.5.1 (2025-06-13) and python version 3.11.6. The reason it is important to specify the versions is because keras and its dependencies in R are wrappers of the python libraries so ensuring cross compatibility is imperative.\n\nlibrary(keras)\nlibrary(kerastuneR)\nlibrary(tensorflow)\nlibrary(dplyr)\nlibrary(tidyr)\n\nThe packages that will be used in the model building and tuning are given above. The packages can be installed using install.packages('package', dependencies = T). Note that a warning might appear saying keras is deprecated and that you should use keras3, this can be ignored for now as the provided code does not work when using keras3.\n\n# ensure that inside the folder you have the project in you also have a folder\n# called data that contains the data. \ndata = read.csv('./data/scotland_avalanche_forecasts_2009_2025.csv')\n\n# this is a very general solution to the problem of missing entries\n# maybe imputation?\ndata = drop_na(data)\ndata = filter(data, FAH != '', OAH != '', Precip.Code != '')\n\n## data description ##\n\n# Date = the date that the forecast was made\n# Area = one of six forecasting region\n# FAH = the forecast avalanche hazard for the following da\n# OAH = the observed avalanche hazard on the following day (observation made the following day)\n# longitude:Incline: position and topography at forecast location (predictor set)\n# Air.Temp:Summit.Wind.Speed = weather in the vicinity of the forecast location at the\n# time the forecast was made (predictor set 2)\n# Max.Temp.Grad:Snow.Temp = results of a ”snow pack test” of the integrity of snow at\n# the forecast location (predictor set 3)\n\n#unique(data['Area'])\n#unique(data['Obs'])\n#unique(data['FAH'])\n#unique(data['OAH'])\n#unique(data['Precip.Code'])\n\n\ndata$FAH         = as.integer(factor(x = data$FAH)) - 1\ndata$OAH         = as.integer(factor(x = data$OAH)) - 1\ndata$Precip.Code = as.integer(factor(data$Precip.Code)) - 1\n\n\npredictor_set_1 = select(data, c('longitude':'Incline'))\npredictor_set_1 = mutate(predictor_set_1, across(c(longitude : Incline), scale))\npredictor_set_1 = as.matrix(predictor_set_1)\n\npredictor_set_2 = select(data, c('Air.Temp':'Summit.Wind.Speed', 'FAH'))\npredictor_set_2 = mutate(predictor_set_2,\n                         across(c(Air.Temp : Summit.Wind.Speed, - Precip.Code), scale))\npredictor_set_2 = as.matrix(predictor_set_2)\n\npredictor_set_3 = select(data, c('Max.Temp.Grad':'Snow.Temp', 'FAH'))\npredictor_set_3 = mutate(predictor_set_3, across(c(Max.Temp.Grad : Snow.Temp), scale))\npredictor_set_3 = as.matrix(predictor_set_3)\n\n\nset.seed(2025)\ntraining_indices = runif(n = floor(nrow(data) * 0.7), min = 1, max = nrow(data))\n\npredictor_set_1_train = predictor_set_1[training_indices, ] \npredictor_set_1_test  = predictor_set_1[-training_indices, ]\n\npredictor_set_2_train = predictor_set_2[training_indices, ] \npredictor_set_2_test  = predictor_set_2[-training_indices, ]\n\npredictor_set_3_train = predictor_set_3[training_indices, ] \npredictor_set_3_test  = predictor_set_3[-training_indices, ]\n\ntraining_data_list = list(predictor_set_1_train, predictor_set_2_train,\n                          predictor_set_3_train)\ntesting_data_list = list(predictor_set_1_test, predictor_set_2_test,\n                         predictor_set_3_test)\n\ny = data$FAH\ny = to_categorical(y, num_classes = 5)\n\ny_train = y[training_indices, ]\ny_test  = y[-training_indices, ]\n\n\nmodel_builder = function(hp){\n  \n  n_layers = hp$Int('number_of_layers', min_value = 2, max_value = 10, step = 1)\n  lr = hp$Choice('learning_rate', values = c(1e-1, 1e-2, 1e-3))  \n  \n  n_x   = ncol(x_train)\n  input = layer_input(shape = c(n_x))\n\n  x = input\n  for (i in 1:n_layers){\n    x = x %&gt;%\n      layer_dense(units = 20, activation = 'relu') %&gt;%\n      layer_dropout(rate = 0.5)\n  }\n  output = x %&gt;% \n    layer_dense(units = 5, activation = 'softmax')\n  \n  model = keras_model(inputs = input, outputs = output)\n  \n  model %&gt;% compile(loss = 'categorical_crossentropy', \n                    optimizer = optimizer_adam(learning_rate = lr),\n                    metrics = c('accuracy'))\n  \n  return(model)\n}\n\n\nfor (i in 1){\n  \n  x_train = training_data_list[[i]]\n  \n  tuner_randomsearch = kerastuneR::RandomSearch(hypermodel = model_builder,\n                                                objective = 'val_accuracy',\n                                                max_trials = 50, \n                                                executions_per_trial = 3,\n                                                directory = 'tuning',\n                                                project_name = paste('randomsearch results', i),\n                                                overwrite = TRUE)\n  \n  tuner_randomsearch %&gt;% fit_tuner(x = x_train,\n                                   y = y_train,\n                                   epochs = 50,\n                                   validation_split = 0.2, shuffle = TRUE)\n  \n  #results_summary(tuner = tuner_randomsearch, num_trials = 5)\n  \n  tuner_hyperband = kerastuneR::Hyperband(hypermodel = model_builder,\n                                          objective = 'val_accuracy',\n                                          directory = 'tuning',\n                                          project_name = paste('hyperband results', i),\n                                          max_epochs = 50,\n                                          hyperband_iterations = 10,\n                                          seed = 2025)\n  \n  tuner_hyperband %&gt;% fit_tuner(x = x_train,\n                                y = y_train,\n                                epochs = 50,\n                                validation_split = 0.2, shuffle = TRUE)\n  \n  #results_summary(tuner = tuner_hyperband, num_trials = 5)\n}"
  },
  {
    "objectID": "model.html#getting-set-up",
    "href": "model.html#getting-set-up",
    "title": "Model",
    "section": "",
    "text": "A neural network was fitted to the data in R, specifically R version 4.5.1 (2025-06-13) and python version 3.11.6. The reason it is important to specify the versions is because keras and its dependencies in R are wrappers of the python libraries so ensuring cross compatibility is imperative.\nThe packages that will be used in the model building and tuning are given above. The packages can be installed using install.packages('package', dependencies = T). Note that after reading in the keras library a warning might appear saying that it is deprecated and that you should use keras3, this can be ignored for now as the provided code does not work when using keras3.\nSince we are trying to predict the forecasted avalanche hazard(FAH), it is important that we do not allow the model to be trained on the observed avalanche hazard(OAH). Therefore the predictor sets are explicitly defined so that there is no accidental data leakage. The FAH, OAH and Precip.Code variables are converted to integers so that the data is compatible with keras.\nA 70/30 training split was used in the data. Usually we would set aside a small portion for validation but as we will see later, keras handles this for us so we do not need to specify a validation set. Using a seed for this step is important as it ensures the split remains every time the code is ran. This is the first step toward achieving repeatable results."
  },
  {
    "objectID": "model.html#defining-the-model",
    "href": "model.html#defining-the-model",
    "title": "Model",
    "section": "Defining the model",
    "text": "Defining the model\nAt this stage we would define the model and let keras do it’s thing. But before we can define the model we need to find the optimal specification of model hyperparameters. Some of the hyperparameters we have control over include: number of layers, number of nodes per layer, acitvation function to use on each layer, the dropout rate and the learning rate. keras is hightly flexible and allows the user control of almost every aspect of the model parameters. To find the optimal value for these hyperparameters we do hyperparameter tuning. In order to do this in R we need to use the kerastuneR library. In order to do the hyperparameter tuning with kerastuneR the model needs to be wrapped in a function that accepts as an input the hyperparameter specification.\n\nmodel_builder = function(hp){\n  \n  n_layers = hp$Int('number_of_layers', min_value = 2, max_value = 10, step = 1)\n  lr = hp$Choice('learning_rate', values = c(1e-1, 1e-2, 1e-3))  \n  \n  n_x   = ncol(x_train)\n  input = layer_input(shape = c(n_x))\n\n  x = input\n  for (i in 1:n_layers){\n    x = x %&gt;%\n      layer_dense(units = 20, activation = 'relu') %&gt;%\n      layer_dropout(rate = 0.5)\n  }\n  output = x %&gt;% \n    layer_dense(units = 5, activation = 'softmax')\n  \n  model = keras_model(inputs = input, outputs = output)\n  \n  model %&gt;% compile(loss = 'categorical_crossentropy', \n                    optimizer = optimizer_adam(learning_rate = lr),\n                    metrics = c('accuracy'))\n  \n  return(model)\n}\n\nFor this project, we have decided to tune for the number of layers and the learning rate. The number of nodes on each layer was chosen to be 20, the activation function to be rectified linear units(Relu) and the dropout rate was sett to 0.5. The specific values were 2-10 layers and learning rates \\(\\in \\{0.1,\\ 0.01,\\ 0.001 \\}\\). Therefore, there were a total of 27 unique models that could be fitted."
  },
  {
    "objectID": "model.html#hyperparameter-tuning",
    "href": "model.html#hyperparameter-tuning",
    "title": "Model",
    "section": "Hyperparameter tuning",
    "text": "Hyperparameter tuning\nkerastuneR has multiple tuning algorithms, we have used the RandomSearch algorithm. RandomSearch takes random combinations of the provided hyperparameters and fits the model each time. Since the combination of hyperparameters is random, there is a possibility that the same mode configuration is ran multiple times by the algorithm. The algorithm does attempt to mitigate this but it not guaranteed to stop duplicate runs. We do have some control over this though by setting the max_trials variable to the total number of unique models that can be specified from our selected tuning ranges. It has also been specified that each model should be fit 3 times by setting executions_per_trial = 3. This reduces variation in the results since there is an element of randomness in the initialisation of the model. A validation split of 20% was used and shuffle = T was used. Doing this shuffles the which observations get used as the validation set. This helps reduce the chances of overfitting.\nAll the results from tuning were saved into folders so that the results can be extracted and used for further analysis. The tuning was was undertaken is by no means exhaustive, no tuning can ever be, but the range of values tuned over is relatively small and therefore the results should be taken with a pinch of salt. With more time and perhaps more compute power a better result is possible."
  },
  {
    "objectID": "model.html#defining-the-model-builder-wrapper-function",
    "href": "model.html#defining-the-model-builder-wrapper-function",
    "title": "Model",
    "section": "Defining the model builder wrapper function",
    "text": "Defining the model builder wrapper function\nNeural networks are extremely flexible and configurable models. But this configurability means that there are several parameters that need to be defined before the model can be trained. In order to find the optimal configuration, hyperparameter tuning needs to be done first. Some of the hyperparameters we have control over include: number of layers, number of nodes per layer, the acitvation function to use on each layer, the dropout rate and the learning rate. keras is flexible and allows the user control of almost every aspect of the model through the parameters. In order to do the hyperameter tuning in R, the kerastuneR library is used. But in order to do the hyperparameter tuning with kerastuneR the model needs to be wrapped in a function that accepts as an input the hyperparameter configuration and outputs a model.\nFor this project, we have decided to tune for the number of layers, number of nodes on each layer and the learning rate. The activation function to be rectified linear units(Relu) and the dropout rate was sett to 0,1. The specific values were 1-5 layers(step size of 1) with 30-50(step size of 10) and 10 equally spaced learning rates [0,01  - 0,0001]. Therefore, there were a total of 75 unique models that could be fitted. The metric the Neural Network tries to minimize is the metric_categorical_accuracy. This was chosen since the target variable has more than 1 category."
  },
  {
    "objectID": "model.html#extra-resources",
    "href": "model.html#extra-resources",
    "title": "Model",
    "section": "Extra resources",
    "text": "Extra resources\nkeras\nkerastuneR"
  },
  {
    "objectID": "model.html#tuning-results",
    "href": "model.html#tuning-results",
    "title": "Model",
    "section": "Tuning results",
    "text": "Tuning results\nkerastuneR saves the tuning results as .json files. Each trial will be its own folder and inside that folder there will be a .json file containing information about the configuration of the Neural Network and the validation accuracy it achieved. The results were compiled into a single table containing the top 3 configurations from each of the predictor sets.\n\n\n\nPredictor set\nValidation accuracy\nLearning rate\nNumber of layers\nnodes on layer 1\nnodes on layer 2\nnodes on layer 3\nnodes on layer 4\nnodes on layer 5\n\n\n\n\n1\n0.42260\n0.00753\n2\n40\n50\nNA\nNA\nNA\n\n\n0.42138\n0.00753\n1\n50\nNA\nNA\nNA\nNA\n\n\n0.42015\n0.00257\n4\n50\n50\n30\n50\nNA\n\n\n2\n0.58354\n0.00505\n5\n40\n40\n40\n50\n50\n\n\n0.58231\n0.00257\n1\n30\nNA\nNA\nNA\nNA\n\n\n0.58231\n0.00257\n4\n50\n30\n40\n40\nNA\n\n\n3\n0.53686\n0.00505\n4\n30\n40\n40\n30\nNA\n\n\n0.53317\n0.00753\n3\n30\n30\n40\nNA\nNA\n\n\n0.53317\n0.00505\n2\n30\n40\nNA\nNA\nNA\n\n\n4\n0.60442\n0.00505\n3\n40\n50\n30\nNA\nNA\n\n\n0.60197\n0.00753\n4\n40\n50\n40\n50\nNA\n\n\n0.60197\n0.00257\n4\n50\n40\n40\n40\nNA\n\n\n\n\n\nFrom the table it is evident that predictor sets 2 and 4 perform relatively equally with validation accuracies of 58% and 60% respectively. Predictor set 3 has slightly worse predictive capability with a prediction accuracy around 53%. Predictor set 1 is firmly the worst, achieving 42% validation accuracy. It is not surprising that predictor set 4 produces the best results, it does contain all the variables after all. The best model configuration for the problem is summarised below.\n\nThe best configuration has 3 hidden layers, with sizes 40, 50 and 30 nodes respectively. This model achieved a validation accuracy of 60.4% in training. The hidden layers all have Relu activation functions and the output layer uses a softmax activation. Softmax is used because we have multiple categories in our traget variable.\n\nConfusion matrix\n\n\n\n\n\n\n\n\n\n\n\n\nReference\n\n\n\nPredicted\n0\n1\n2\n3\n4\n\n\n\n\n0\n186\n78\n4\n20\n126\n\n\n1\n4\n9\n2\n1\n3\n\n\n2\n11\n13\n3\n1\n3\n\n\n3\n21\n2\n1\n499\n163\n\n\n4\n128\n30\n2\n117\n317\n\n\n\n\n\nSay something about the confusion matrix here. Blah blah blah\n\nClass metrics\n\n\n\nSensitivity\nSpecificity\nPos Pred Value\nNeg Pred Value\nPrecision\nRecall\nF1\nPrevalence\nDetection Rate\nDetection Prevalence\nBalanced Accuracy\n\n\n\n\nClass: 0\n0.531\n0.836\n0.449\n0.877\n0.449\n0.531\n0.487\n0.201\n0.107\n0.237\n0.684\n\n\nClass: 1\n0.068\n0.994\n0.474\n0.929\n0.474\n0.068\n0.119\n0.076\n0.005\n0.011\n0.531\n\n\nClass: 2\n0.250\n0.984\n0.097\n0.995\n0.097\n0.250\n0.140\n0.007\n0.002\n0.018\n0.617\n\n\nClass: 3\n0.782\n0.831\n0.727\n0.869\n0.727\n0.782\n0.754\n0.366\n0.286\n0.393\n0.807\n\n\nClass: 4\n0.518\n0.755\n0.534\n0.743\n0.534\n0.518\n0.526\n0.351\n0.182\n0.341\n0.637\n\n\n\n\n\nSay something about the metrics matrix here. Blah blah blah"
  },
  {
    "objectID": "model.html#introduction-to-keras",
    "href": "model.html#introduction-to-keras",
    "title": "Model",
    "section": "",
    "text": "keras is an open-source python library that allows users to to build Neural Networks. It is known for modularity and it’s relatively gentle learning curve compared to other libraries such as pytorch. The modularity makes keras a good library for projects requiring experimentation such as this one. It should be noted that when working with keras in R, all the functions used are wrapper functions of the python functions. This makes version control extremely important. For this project, the models were created, trained and tuned using R version 4.5.1 (2025-06-13) and python version 3.11.6.\nFor this project, the goal is to train a neural network to predict the forecasted avalanche hazard(FAH). Since we are predicting the forecast, the observed avalanche hazard(OAH) needs to be removed otherwise the model would be trained on information that would not be available on new data, i.e, data leakage. Therefore the predictor sets are explicitly defined so that there is no data leakage. The FAH, OAH and Precip.Code variables are converted to integers so that the data is compatible with keras.\nA 70/30 training split was used in the data. Usually we would set aside a small portion for validation but as we will see later, keras handles this for us so we do not need to specify a validation set. Using a seed for this step is important as it ensures the split remains every time the code is ran. This is the first step toward achieving repeatable results."
  }
]