{"title":"Final EDA","markdown":{"yaml":{"title":"Final EDA","author":"Data Cleaning & EDA Team","date":"2025-09-26","output":"pdf_document"},"headingText":"Cleaning","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n\nlibrary(tidyverse)\nlibrary(corrplot)\nlibrary(lubridate)\nlibrary(gridExtra)\nlibrary(VIM)\nlibrary(mice)\nlibrary(caret)\nlibrary(ggplot2)\n```\n\n\n```{r}\ndata <- read.csv(\"scotland_avalanche_forecasts_2009_2025.csv\", header = TRUE)\n```\n\n```{r, eval=FALSE}\nhead(data)\ndim(data)\nstr(data)\ntable(data$FAH) # target variable levels\nsummary(data)\n```\n\n\n\n```{r}\n# Only keep rows where the target variable FAH is not missing (-109 rows)\ndata <- data %>% filter(!is.na(FAH) & FAH != \"\")\n\n# Convert categorical target variable to numeric \ndata$FAH <- as.integer(factor(x = data$FAH, levels = c(\"Low\", \"Moderate\", \"Considerable -\", \"Considerable +\", \"High\"))) - 1\ndata$Precip.Code <- as.integer(factor(data$Precip.Code)) - 1\ndata$Area <- as.integer(factor(data$Area)) - 1   # 6 areas\n\n# Create a year variable for date & Month\n# Don't have any data for July, Aug and Sept (summer months) \n# Don't know if a month variable will be important? Should i make those months values be 0?\ndata <- data %>% mutate(Year = year(Date), Month = month(Date))\ntable(data$Month)\n\n# Remove unnecessary columns\ndata <- data %>% select(-OSgrid, -OAH, -Obs, -Location, -Date)\n\n```\n\n# Missing data summary\n\n```{r}\nmissing_summary <- data %>%\n  summarise_all(~sum(is.na(.))) %>%\n  pivot_longer(everything(), names_to = \"Variable\", values_to = \"Missing_Count\") %>%\n  mutate(Missing_Percent = round(Missing_Count / nrow(data) * 100, 1)) %>%\n  arrange(desc(Missing_Count))\nmissing_summary\n\n```\n\n# Cleaning dataset from errors \n\n```{r}\ndata_cleaned <- data %>%\n  mutate(\n    Alt = ifelse(Alt < 0 | Alt > 1345, NA_real_, Alt),\n    Aspect = ifelse(Aspect < 0 | Aspect > 360, NA_real_, Aspect),\n    Incline = ifelse(Incline < 0 | Incline > 90, NA_real_, Incline),\n    Wind.Speed = ifelse(Wind.Speed < 0 | Wind.Speed > 176, NA_real_, Wind.Speed),\n    Cloud = ifelse(Cloud < 0 | Cloud > 100, NA_real_, Cloud),\n    Total.Snow.Depth = ifelse(Total.Snow.Depth < 0 | Total.Snow.Depth > 1500, NA_real_, Total.Snow.Depth),\n    Summit.Wind.Speed = ifelse(Summit.Wind.Speed < 0 | Summit.Wind.Speed > 176, NA_real_, Summit.Wind.Speed),\n    Foot.Pen = ifelse(Foot.Pen < 0 | Foot.Pen > 100, NA_real_, Foot.Pen),\n    Wind.Dir = ifelse(Wind.Dir < 0 | Wind.Dir > 360, NA_real_, Wind.Dir),\n    Summit.Wind.Dir = ifelse(Summit.Wind.Dir < 0 | Summit.Wind.Dir > 360, NA_real_, Summit.Wind.Dir),\n    Snow.Temp = ifelse(Snow.Temp > 0.5, NA_real_, Snow.Temp),\n    Max.Temp.Grad = ifelse(Max.Temp.Grad < 0 | Max.Temp.Grad > 2.5, NA_real_, Max.Temp.Grad))\n\n```\n\n\n```{r}\n# Convert circular variables into two features using sine and cosine transformations\ndata_cleaned <- data_cleaned %>% \n  mutate(Aspect_sin = sin(Aspect * pi / 180), Aspect_cos = cos(Aspect * pi / 180)) %>% \n  mutate(WindDir_sin = sin(Wind.Dir * pi / 180), WindDir_cos = cos(Wind.Dir * pi / 180)) %>%\n  mutate(SummitWindDir_sin = sin(Summit.Wind.Dir * pi / 180), SummitWindDir_cos = cos(Summit.Wind.Dir * pi / 180)) %>%\n  select(-Wind.Dir, -Aspect, -Summit.Wind.Dir)\n\n```\n\n\n```{r}\n# Remove variables with high percentage of missing values or  those that don't make sense\n\ndata_cleaned <- data_cleaned %>%\n  select(-Ski.Pen, -AV.Cat, -Crystals, -Wetness, -Year, -Snow.Index, -Insolation, -No.Settle)\nnames(data_cleaned)\n\ndim(data_cleaned)\n```\n\n\nRemoving observations with a plausible Total.Snow.Depth & Foot.Pen values, however, Foot.Pen > Total.Snow.Depth, which is impossible:\n\n```{r}\ndata_cleaned <- data_cleaned %>%\n  filter(is.na(Foot.Pen) | is.na(Total.Snow.Depth) | Foot.Pen <= Total.Snow.Depth)\n```\n\n\n## Missing data summary on cleaned dataset\n\n```{r}\nmissing_summary <- data_cleaned %>%\n  summarise_all(~sum(is.na(.))) %>%\n  pivot_longer(everything(), names_to = \"Variable\", values_to = \"Missing_Count\") %>%\n  mutate(Missing_Percent = round(Missing_Count / nrow(data_cleaned) * 100, 1)) %>%\n  arrange(desc(Missing_Count))\nmissing_summary\n\ndim(data_cleaned)\n```\n\n```{r imputation}\n\n# No variables have more than 50% missing data so impute all missing values.\n\npred_1 <- c(\"Area\", \"longitude\", \"latitude\", \"Alt\", \"Incline\", \"Aspect_sin\", \"Aspect_cos\")\n\npred_2 <- c(\"Air.Temp\", \"Wind.Speed\", \"Cloud\", \"Precip.Code\", \"Drift\",\n           \"Summit.Air.Temp\", \"Summit.Wind.Speed\", \"WindDir_sin\", \"WindDir_cos\", \n           \"SummitWindDir_sin\", \"SummitWindDir_cos\")\n\npred_3 <- c(\"Total.Snow.Depth\", \"Foot.Pen\", \"Rain.at.900\", \"Max.Temp.Grad\", \n           \"Max.Hardness.Grad\", \"Snow.Temp\")\n\n# Additional variables\nother_vars <- c(\"Month\")\n\nall_pred <- c(pred_1, pred_2, pred_3, other_vars)\n\nmd.pattern(data_cleaned[,c(\"FAH\", all_pred[1:min(10, length(all_pred))])], rotate.names = TRUE) \n\nmice_data <- data_cleaned %>%\n  select(FAH, all_of(all_pred))\n\nset.seed(12345)\n\nmice_output <- mice(mice_data, m = 5, method = 'pmm', printFlag = FALSE)\n\ndata_imputed <- complete(mice_output, 1)\n\n# Diagnostic Plots\n# Strip plot - shows distribution of imputed values\n\nstripplot(mice_output, pch=20, cex=1.2)\n\ndensityplot(mice_output, ~ Alt) # bad\ndensityplot(mice_output, ~ Aspect_sin) # maybe\ndensityplot(mice_output, ~ Aspect_cos) \ndensityplot(mice_output, ~ Incline) # bad\n\ndensityplot(mice_output, ~ Air.Temp) # bad\ndensityplot(mice_output, ~ WindDir_sin) # maybe\ndensityplot(mice_output, ~ WindDir_cos) # maybe\ndensityplot(mice_output, ~ Wind.Speed)\ndensityplot(mice_output, ~ Cloud) # maybe\n\ndensityplot(mice_output, ~ Summit.Air.Temp)\ndensityplot(mice_output, ~ SummitWindDir_sin)\ndensityplot(mice_output, ~ SummitWindDir_cos)\ndensityplot(mice_output, ~ Summit.Wind.Speed)\n\ndensityplot(mice_output, ~ Max.Temp.Grad) # maybe\ndensityplot(mice_output, ~ Max.Hardness.Grad) \ndensityplot(mice_output, ~ Snow.Temp) # maybe\n\n# Convergence plot\n\nplot(mice_output, main = \"MICE Convergence - All Variables\")\n\nbad_vars <- c(\"Alt\", \"Air.Temp\", \"Incline\")\n\nmice_data <- mice_data %>%\n  select(FAH, all_of(setdiff(all_pred, bad_vars)))\n\ndim(mice_data)\n\nset.seed(12345)\n\nmice_output2 <- mice(mice_data, m = 5, method = 'pmm', printFlag = FALSE)\ndata_imputed2 <- complete(mice_output2, 1)\n\n```\n\n```{r outliers}\n\n# Handle outliers by capping them\n\nfor(var in names(data_imputed2)) {\n  if(is.numeric(data_imputed2[[var]])) {\n    \n    x <- data_imputed2[[var]]\n    \n    lower_bound <- quantile(x, 0.01, na.rm = TRUE)\n    upper_bound <- quantile(x, 0.99, na.rm = TRUE)\n    \n    n_outliers <- sum(x < lower_bound | x > upper_bound, na.rm = TRUE)\n    data_imputed2[[var]][x < lower_bound] <- lower_bound\n    data_imputed2[[var]][x > upper_bound] <- upper_bound\n    \n    # Optional: print info about outliers handled\n    if(n_outliers > 0) {\n      print(paste(var, \"- Outliers capped:\", n_outliers))\n    }\n  }\n}\n\n```\n\n```{r correlation}\n\n# Use imputed data (no missing values)\n\ncorr_data <- data_imputed2  \n\ncorr_matrix <- cor(corr_data, use = \"complete.obs\")\n\n# Correlation with FAH\nfah_corr <- corr_matrix[,\"FAH\"] %>%\n  as.data.frame() %>%\n  rownames_to_column(\"Variable\") %>%\n  rename(Correlation = \".\") %>%\n  filter(Variable != \"FAH\") %>%\n  arrange(desc(abs(Correlation)))\n\n# Top 10 correlations with FAH\nprint(head(fah_corr, 10))\n\n# Correlation heatmap\ncorrplot(corr_matrix, method = \"color\", type = \"upper\", \n         order = \"hclust\", tl.cex = 0.7, tl.col = \"black\")\n\n# FAH Correlation\n\ndata_imputed2$FAH_factor <- factor(data_imputed2$FAH,\n                           levels = 0:4,\n                           labels = c(\"Low\", \"Moderate\", \"Considerable -\", \n                                     \"Considerable +\", \"High\"))\n\n# Predictor 1\n\npredictor_1 <- pred_1[pred_1 %in% names(data_imputed2)]\n\ndata1 <- data_imputed2 %>%\n  select(FAH_factor, FAH, all_of(predictor_1))\n\ncorr1 <- cor(data1[,predictor_1], data1$FAH) %>%\n  as.data.frame() %>%\n  rownames_to_column(\"Variable\") %>%\n  rename(FAH_Correlation = \"V1\") %>%\n  arrange(desc(abs(FAH_Correlation)))\n\n# Create boxplots\nplot1 <- list()\nfor(i in 1:min(4, length(predictor_1))) {\n  var <- predictor_1[i]\n  plot1[[i]] <- ggplot(data1, aes(x = factor(FAH_factor), y = .data[[var]])) +\n    geom_boxplot(fill = \"darkblue\", alpha = 0.7) +\n    labs(title = paste(var, \"vs FAH\"),\n         x = \"FAH\", y = var) +\n    theme_minimal()\n}\n\ndo.call(grid.arrange, c(plot1, ncol = 2))\n\n# Predictor 2\n\npredictor_2 <- pred_2[pred_2 %in% names(data_imputed2)]\n\ndata2 <- data_imputed2 %>%\n  select(FAH_factor, FAH, all_of(predictor_2))\n\ncorr2 <- cor(data2[,predictor_2], data2$FAH) %>%\n  as.data.frame() %>%\n  rownames_to_column(\"Variable\") %>%\n  rename(FAH_Correlation = \"V1\") %>%\n  arrange(desc(abs(FAH_Correlation)))\n\nplot2 <- list()\nfor(i in 1:min(4, length(predictor_2))) {\n  var <- predictor_2[i]\n  plot2[[i]] <- ggplot(data2, aes(x = factor(FAH_factor), y = .data[[var]])) +\n    geom_boxplot(fill = \"darkgreen\", alpha = 0.7) +\n    labs(title = paste(var, \"vs FAH\"),\n         x = \"FAH\", y = var) +\n    theme_minimal()\n}\n\ndo.call(grid.arrange, c(plot2, ncol = 2))\n\n# Predictor 3\n\npredictor_3 <- pred_3[pred_3 %in% names(data_imputed2)]\n\ndata3 <- data_imputed2 %>%\n  select(FAH_factor, FAH, all_of(predictor_3))\n\ncorr3 <- cor(data3[,predictor_3], data3$FAH) %>%\n  as.data.frame() %>%\n  rownames_to_column(\"Variable\") %>%\n  rename(FAH_Correlation = \"V1\") %>%\n  arrange(desc(abs(FAH_Correlation)))\n\nplot3 <- list()\nfor(i in 1:min(4, length(predictor_3))) {\n  var <- predictor_3[i]\n  plot3[[i]] <- ggplot(data3, aes(x = factor(FAH_factor), y = .data[[var]])) +\n    geom_boxplot(fill = \"darkred\", alpha = 0.7) +\n    labs(title = paste(var, \"vs FAH\"),\n         x = \"FAH\", y = var) +\n    theme_minimal()\n}\n\ndo.call(grid.arrange, c(plot3, ncol = 2))\n\n```\n\n```{r scaling}\n\nset.seed(12345)\n\ntrain_index <- createDataPartition(data_imputed2$FAH, \n                                   p = 0.7, \n                                   list = FALSE)\n\ntrain_data <- data_imputed2[train_index, ]\ntest_data <- data_imputed2[-train_index, ]\n\n# Standardisation\n\nnumeric_vars <- names(data_imputed2)[sapply(data_imputed2, is.numeric)]\nnumeric_vars <- setdiff(numeric_vars, \"FAH\")\n\npreproc_obj <- preProcess(\n  train_data %>% select(all_of(numeric_vars)),\n  method = c(\"center\", \"scale\")  \n)\n\ntrain_scaled <- predict(preproc_obj, train_data)\ntest_scaled <- predict(preproc_obj, test_data)\n\npredictor_set_1_train = select(train_scaled, longitude:Aspect_cos)\npredictor_set_2_train = select(train_scaled, Wind.Speed:Rain.at.900)\npredictor_set_3_train = select(train_scaled, Max.Temp.Grad:Snow.Temp)\npredictor_set_4_train = select(train_scaled, c(-FAH, -FAH_factor))\ntraining_data = list(predictor_set_1_train, predictor_set_2_train, \n                     predictor_set_3_train, predictor_set_4_train)\nsave(training_data, file = 'data/training_data.RData')\n\npredictor_set_1_test = select(test_scaled, longitude:Aspect_cos)\npredictor_set_2_test = select(test_scaled, Wind.Speed:Rain.at.900)\npredictor_set_3_test = select(test_scaled, Max.Temp.Grad:Snow.Temp)\npredictor_set_4_test = select(test_scaled, c(-FAH, -FAH_factor))\ntesting_data = list(predictor_set_1_test, predictor_set_2_test, \n                    predictor_set_3_test, predictor_set_4_test)\nsave(testing_data, file = 'data/testing_data.RData')\n\ny_train = train_scaled$FAH\nsave(y_train, file = 'data/y_train.RData')\ny_test  = test_scaled$FAH\nsave(y_test, file = 'data/y_test.RData')\n```\n\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n\nlibrary(tidyverse)\nlibrary(corrplot)\nlibrary(lubridate)\nlibrary(gridExtra)\nlibrary(VIM)\nlibrary(mice)\nlibrary(caret)\nlibrary(ggplot2)\n```\n\n\n```{r}\ndata <- read.csv(\"scotland_avalanche_forecasts_2009_2025.csv\", header = TRUE)\n```\n\n```{r, eval=FALSE}\nhead(data)\ndim(data)\nstr(data)\ntable(data$FAH) # target variable levels\nsummary(data)\n```\n\n\n# Cleaning\n\n```{r}\n# Only keep rows where the target variable FAH is not missing (-109 rows)\ndata <- data %>% filter(!is.na(FAH) & FAH != \"\")\n\n# Convert categorical target variable to numeric \ndata$FAH <- as.integer(factor(x = data$FAH, levels = c(\"Low\", \"Moderate\", \"Considerable -\", \"Considerable +\", \"High\"))) - 1\ndata$Precip.Code <- as.integer(factor(data$Precip.Code)) - 1\ndata$Area <- as.integer(factor(data$Area)) - 1   # 6 areas\n\n# Create a year variable for date & Month\n# Don't have any data for July, Aug and Sept (summer months) \n# Don't know if a month variable will be important? Should i make those months values be 0?\ndata <- data %>% mutate(Year = year(Date), Month = month(Date))\ntable(data$Month)\n\n# Remove unnecessary columns\ndata <- data %>% select(-OSgrid, -OAH, -Obs, -Location, -Date)\n\n```\n\n# Missing data summary\n\n```{r}\nmissing_summary <- data %>%\n  summarise_all(~sum(is.na(.))) %>%\n  pivot_longer(everything(), names_to = \"Variable\", values_to = \"Missing_Count\") %>%\n  mutate(Missing_Percent = round(Missing_Count / nrow(data) * 100, 1)) %>%\n  arrange(desc(Missing_Count))\nmissing_summary\n\n```\n\n# Cleaning dataset from errors \n\n```{r}\ndata_cleaned <- data %>%\n  mutate(\n    Alt = ifelse(Alt < 0 | Alt > 1345, NA_real_, Alt),\n    Aspect = ifelse(Aspect < 0 | Aspect > 360, NA_real_, Aspect),\n    Incline = ifelse(Incline < 0 | Incline > 90, NA_real_, Incline),\n    Wind.Speed = ifelse(Wind.Speed < 0 | Wind.Speed > 176, NA_real_, Wind.Speed),\n    Cloud = ifelse(Cloud < 0 | Cloud > 100, NA_real_, Cloud),\n    Total.Snow.Depth = ifelse(Total.Snow.Depth < 0 | Total.Snow.Depth > 1500, NA_real_, Total.Snow.Depth),\n    Summit.Wind.Speed = ifelse(Summit.Wind.Speed < 0 | Summit.Wind.Speed > 176, NA_real_, Summit.Wind.Speed),\n    Foot.Pen = ifelse(Foot.Pen < 0 | Foot.Pen > 100, NA_real_, Foot.Pen),\n    Wind.Dir = ifelse(Wind.Dir < 0 | Wind.Dir > 360, NA_real_, Wind.Dir),\n    Summit.Wind.Dir = ifelse(Summit.Wind.Dir < 0 | Summit.Wind.Dir > 360, NA_real_, Summit.Wind.Dir),\n    Snow.Temp = ifelse(Snow.Temp > 0.5, NA_real_, Snow.Temp),\n    Max.Temp.Grad = ifelse(Max.Temp.Grad < 0 | Max.Temp.Grad > 2.5, NA_real_, Max.Temp.Grad))\n\n```\n\n\n```{r}\n# Convert circular variables into two features using sine and cosine transformations\ndata_cleaned <- data_cleaned %>% \n  mutate(Aspect_sin = sin(Aspect * pi / 180), Aspect_cos = cos(Aspect * pi / 180)) %>% \n  mutate(WindDir_sin = sin(Wind.Dir * pi / 180), WindDir_cos = cos(Wind.Dir * pi / 180)) %>%\n  mutate(SummitWindDir_sin = sin(Summit.Wind.Dir * pi / 180), SummitWindDir_cos = cos(Summit.Wind.Dir * pi / 180)) %>%\n  select(-Wind.Dir, -Aspect, -Summit.Wind.Dir)\n\n```\n\n\n```{r}\n# Remove variables with high percentage of missing values or  those that don't make sense\n\ndata_cleaned <- data_cleaned %>%\n  select(-Ski.Pen, -AV.Cat, -Crystals, -Wetness, -Year, -Snow.Index, -Insolation, -No.Settle)\nnames(data_cleaned)\n\ndim(data_cleaned)\n```\n\n\nRemoving observations with a plausible Total.Snow.Depth & Foot.Pen values, however, Foot.Pen > Total.Snow.Depth, which is impossible:\n\n```{r}\ndata_cleaned <- data_cleaned %>%\n  filter(is.na(Foot.Pen) | is.na(Total.Snow.Depth) | Foot.Pen <= Total.Snow.Depth)\n```\n\n\n## Missing data summary on cleaned dataset\n\n```{r}\nmissing_summary <- data_cleaned %>%\n  summarise_all(~sum(is.na(.))) %>%\n  pivot_longer(everything(), names_to = \"Variable\", values_to = \"Missing_Count\") %>%\n  mutate(Missing_Percent = round(Missing_Count / nrow(data_cleaned) * 100, 1)) %>%\n  arrange(desc(Missing_Count))\nmissing_summary\n\ndim(data_cleaned)\n```\n\n```{r imputation}\n\n# No variables have more than 50% missing data so impute all missing values.\n\npred_1 <- c(\"Area\", \"longitude\", \"latitude\", \"Alt\", \"Incline\", \"Aspect_sin\", \"Aspect_cos\")\n\npred_2 <- c(\"Air.Temp\", \"Wind.Speed\", \"Cloud\", \"Precip.Code\", \"Drift\",\n           \"Summit.Air.Temp\", \"Summit.Wind.Speed\", \"WindDir_sin\", \"WindDir_cos\", \n           \"SummitWindDir_sin\", \"SummitWindDir_cos\")\n\npred_3 <- c(\"Total.Snow.Depth\", \"Foot.Pen\", \"Rain.at.900\", \"Max.Temp.Grad\", \n           \"Max.Hardness.Grad\", \"Snow.Temp\")\n\n# Additional variables\nother_vars <- c(\"Month\")\n\nall_pred <- c(pred_1, pred_2, pred_3, other_vars)\n\nmd.pattern(data_cleaned[,c(\"FAH\", all_pred[1:min(10, length(all_pred))])], rotate.names = TRUE) \n\nmice_data <- data_cleaned %>%\n  select(FAH, all_of(all_pred))\n\nset.seed(12345)\n\nmice_output <- mice(mice_data, m = 5, method = 'pmm', printFlag = FALSE)\n\ndata_imputed <- complete(mice_output, 1)\n\n# Diagnostic Plots\n# Strip plot - shows distribution of imputed values\n\nstripplot(mice_output, pch=20, cex=1.2)\n\ndensityplot(mice_output, ~ Alt) # bad\ndensityplot(mice_output, ~ Aspect_sin) # maybe\ndensityplot(mice_output, ~ Aspect_cos) \ndensityplot(mice_output, ~ Incline) # bad\n\ndensityplot(mice_output, ~ Air.Temp) # bad\ndensityplot(mice_output, ~ WindDir_sin) # maybe\ndensityplot(mice_output, ~ WindDir_cos) # maybe\ndensityplot(mice_output, ~ Wind.Speed)\ndensityplot(mice_output, ~ Cloud) # maybe\n\ndensityplot(mice_output, ~ Summit.Air.Temp)\ndensityplot(mice_output, ~ SummitWindDir_sin)\ndensityplot(mice_output, ~ SummitWindDir_cos)\ndensityplot(mice_output, ~ Summit.Wind.Speed)\n\ndensityplot(mice_output, ~ Max.Temp.Grad) # maybe\ndensityplot(mice_output, ~ Max.Hardness.Grad) \ndensityplot(mice_output, ~ Snow.Temp) # maybe\n\n# Convergence plot\n\nplot(mice_output, main = \"MICE Convergence - All Variables\")\n\nbad_vars <- c(\"Alt\", \"Air.Temp\", \"Incline\")\n\nmice_data <- mice_data %>%\n  select(FAH, all_of(setdiff(all_pred, bad_vars)))\n\ndim(mice_data)\n\nset.seed(12345)\n\nmice_output2 <- mice(mice_data, m = 5, method = 'pmm', printFlag = FALSE)\ndata_imputed2 <- complete(mice_output2, 1)\n\n```\n\n```{r outliers}\n\n# Handle outliers by capping them\n\nfor(var in names(data_imputed2)) {\n  if(is.numeric(data_imputed2[[var]])) {\n    \n    x <- data_imputed2[[var]]\n    \n    lower_bound <- quantile(x, 0.01, na.rm = TRUE)\n    upper_bound <- quantile(x, 0.99, na.rm = TRUE)\n    \n    n_outliers <- sum(x < lower_bound | x > upper_bound, na.rm = TRUE)\n    data_imputed2[[var]][x < lower_bound] <- lower_bound\n    data_imputed2[[var]][x > upper_bound] <- upper_bound\n    \n    # Optional: print info about outliers handled\n    if(n_outliers > 0) {\n      print(paste(var, \"- Outliers capped:\", n_outliers))\n    }\n  }\n}\n\n```\n\n```{r correlation}\n\n# Use imputed data (no missing values)\n\ncorr_data <- data_imputed2  \n\ncorr_matrix <- cor(corr_data, use = \"complete.obs\")\n\n# Correlation with FAH\nfah_corr <- corr_matrix[,\"FAH\"] %>%\n  as.data.frame() %>%\n  rownames_to_column(\"Variable\") %>%\n  rename(Correlation = \".\") %>%\n  filter(Variable != \"FAH\") %>%\n  arrange(desc(abs(Correlation)))\n\n# Top 10 correlations with FAH\nprint(head(fah_corr, 10))\n\n# Correlation heatmap\ncorrplot(corr_matrix, method = \"color\", type = \"upper\", \n         order = \"hclust\", tl.cex = 0.7, tl.col = \"black\")\n\n# FAH Correlation\n\ndata_imputed2$FAH_factor <- factor(data_imputed2$FAH,\n                           levels = 0:4,\n                           labels = c(\"Low\", \"Moderate\", \"Considerable -\", \n                                     \"Considerable +\", \"High\"))\n\n# Predictor 1\n\npredictor_1 <- pred_1[pred_1 %in% names(data_imputed2)]\n\ndata1 <- data_imputed2 %>%\n  select(FAH_factor, FAH, all_of(predictor_1))\n\ncorr1 <- cor(data1[,predictor_1], data1$FAH) %>%\n  as.data.frame() %>%\n  rownames_to_column(\"Variable\") %>%\n  rename(FAH_Correlation = \"V1\") %>%\n  arrange(desc(abs(FAH_Correlation)))\n\n# Create boxplots\nplot1 <- list()\nfor(i in 1:min(4, length(predictor_1))) {\n  var <- predictor_1[i]\n  plot1[[i]] <- ggplot(data1, aes(x = factor(FAH_factor), y = .data[[var]])) +\n    geom_boxplot(fill = \"darkblue\", alpha = 0.7) +\n    labs(title = paste(var, \"vs FAH\"),\n         x = \"FAH\", y = var) +\n    theme_minimal()\n}\n\ndo.call(grid.arrange, c(plot1, ncol = 2))\n\n# Predictor 2\n\npredictor_2 <- pred_2[pred_2 %in% names(data_imputed2)]\n\ndata2 <- data_imputed2 %>%\n  select(FAH_factor, FAH, all_of(predictor_2))\n\ncorr2 <- cor(data2[,predictor_2], data2$FAH) %>%\n  as.data.frame() %>%\n  rownames_to_column(\"Variable\") %>%\n  rename(FAH_Correlation = \"V1\") %>%\n  arrange(desc(abs(FAH_Correlation)))\n\nplot2 <- list()\nfor(i in 1:min(4, length(predictor_2))) {\n  var <- predictor_2[i]\n  plot2[[i]] <- ggplot(data2, aes(x = factor(FAH_factor), y = .data[[var]])) +\n    geom_boxplot(fill = \"darkgreen\", alpha = 0.7) +\n    labs(title = paste(var, \"vs FAH\"),\n         x = \"FAH\", y = var) +\n    theme_minimal()\n}\n\ndo.call(grid.arrange, c(plot2, ncol = 2))\n\n# Predictor 3\n\npredictor_3 <- pred_3[pred_3 %in% names(data_imputed2)]\n\ndata3 <- data_imputed2 %>%\n  select(FAH_factor, FAH, all_of(predictor_3))\n\ncorr3 <- cor(data3[,predictor_3], data3$FAH) %>%\n  as.data.frame() %>%\n  rownames_to_column(\"Variable\") %>%\n  rename(FAH_Correlation = \"V1\") %>%\n  arrange(desc(abs(FAH_Correlation)))\n\nplot3 <- list()\nfor(i in 1:min(4, length(predictor_3))) {\n  var <- predictor_3[i]\n  plot3[[i]] <- ggplot(data3, aes(x = factor(FAH_factor), y = .data[[var]])) +\n    geom_boxplot(fill = \"darkred\", alpha = 0.7) +\n    labs(title = paste(var, \"vs FAH\"),\n         x = \"FAH\", y = var) +\n    theme_minimal()\n}\n\ndo.call(grid.arrange, c(plot3, ncol = 2))\n\n```\n\n```{r scaling}\n\nset.seed(12345)\n\ntrain_index <- createDataPartition(data_imputed2$FAH, \n                                   p = 0.7, \n                                   list = FALSE)\n\ntrain_data <- data_imputed2[train_index, ]\ntest_data <- data_imputed2[-train_index, ]\n\n# Standardisation\n\nnumeric_vars <- names(data_imputed2)[sapply(data_imputed2, is.numeric)]\nnumeric_vars <- setdiff(numeric_vars, \"FAH\")\n\npreproc_obj <- preProcess(\n  train_data %>% select(all_of(numeric_vars)),\n  method = c(\"center\", \"scale\")  \n)\n\ntrain_scaled <- predict(preproc_obj, train_data)\ntest_scaled <- predict(preproc_obj, test_data)\n\npredictor_set_1_train = select(train_scaled, longitude:Aspect_cos)\npredictor_set_2_train = select(train_scaled, Wind.Speed:Rain.at.900)\npredictor_set_3_train = select(train_scaled, Max.Temp.Grad:Snow.Temp)\npredictor_set_4_train = select(train_scaled, c(-FAH, -FAH_factor))\ntraining_data = list(predictor_set_1_train, predictor_set_2_train, \n                     predictor_set_3_train, predictor_set_4_train)\nsave(training_data, file = 'data/training_data.RData')\n\npredictor_set_1_test = select(test_scaled, longitude:Aspect_cos)\npredictor_set_2_test = select(test_scaled, Wind.Speed:Rain.at.900)\npredictor_set_3_test = select(test_scaled, Max.Temp.Grad:Snow.Temp)\npredictor_set_4_test = select(test_scaled, c(-FAH, -FAH_factor))\ntesting_data = list(predictor_set_1_test, predictor_set_2_test, \n                    predictor_set_3_test, predictor_set_4_test)\nsave(testing_data, file = 'data/testing_data.RData')\n\ny_train = train_scaled$FAH\nsave(y_train, file = 'data/y_train.RData')\ny_test  = test_scaled$FAH\nsave(y_test, file = 'data/y_test.RData')\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":"pdf_document","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":false,"output-file":"Final_EDA.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":"journal","smooth-scroll":true,"anchor-sections":true,"title":"Final EDA","author":"Data Cleaning & EDA Team","date":"2025-09-26"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}